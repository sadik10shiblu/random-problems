Given 2 numbers N
 and Q
, an array A
 of N
 number and Q
 number of pairs L
, R
. For each query Q
 print a single line that contains the summation of all numbers from index L
 to index R
.

Input
First line contains two numbers N
, Q
 (1≤N,Q≤10^5)
 where N
 is number of elements in A
 and Q
 is number of query pairs.

Second line contains N
 numbers(1≤Ai≤109)
.

Next Q
 lines contains L,R
 (1≤L≤R≤N)
.

Output
For each query Q
 print a single line that contains the summation of all numbers from index L
 to index R
.

Examples
InputCopy
6 3
6 4 2 7 2 7
1 3
3 6
1 6
OutputCopy
12
18
28
InputCopy
4 3
5 5 2 3
1 3
2 3
1 4
OutputCopy
12
7
15
*****SOL********                TIME COMPLEXITY
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int N,Q;
    cin>>N>>Q;
    vector<int>A(N);
    for(int i=1;i<N+1;i++)       -> O(N)
    {
        cin>>A[i];
    }

    for(int i=0;i<Q;i++)        ->O(Q)
    {
        int L,R,sum=0;
        cin>>L>>R;
        for(int i=L;i<=R;i++)    ->O(N) we have select always the worst one here L to R can be 1 to N(array size) 
        {
            sum=sum+A[i];
        }
        cout<<sum<<endl;
    }
                                    from 71 line to 80 line total time complexity is O(Q*N) 
                                    and the whole there is two complexity O(N) and O(Q*N)  we have to chose the worst one and it is O(Q*N)  
                                    time will be O(10^5 * 10^5=10^10) which will be runtime error cause it highest limit is 10^7.
    return 0;
}
TO AVOID TLE ERROR:
For context module 3 prefix sum and binary
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int N,Q;
    cin>>N>>Q;
    vector<long long int>A(N+1);//it will run to N.so we need to push one space up cause need an extra space
    for(int i=1;i<=N;i++)
    {
        cin>>A[i];
    }
    vector<long long int>P(N+1);
    P[1]=A[1];
    for(int i=1;i<=N;i++)
    {
    P[i]=P[i-1]+A[i];
    }

     while(Q--)//when 0 come it automatically off cause 0 means false
    {


    int L,R;
    long long S;
    cin>>L>>R;
//    int S;
    if(L==1)
    {
        S=P[R];
    }
    else
    {
        S=P[R]-P[L-1];
    }




    cout<<S<<endl;
}

}

